# Infodump.ps1 - Windows Enumeration Script

# Save output to a text file on the Desktop
$outputFile = "$env:USERPROFILE\Desktop\infodump_report.txt"
Start-Transcript -Path $outputFile -Append

Write-Host "Starting Windows system enumeration... Please wait."

# Section 1: OS Information
Write-Host "`n====================="
Write-Host "===*******OS******==="
Write-Host "=====================`n"
Write-Output "=== OS Information ==="
Get-ComputerInfo | Select-Object CsName, WindowsVersion, OsArchitecture, Manufacturer, InstallDate | Format-Table -AutoSize

# Section 2: Users
Write-Host "`n========================="
Write-Host "===*******USERS*******==="
Write-Host "=========================`n"
Write-Output "=== Users ==="
Get-LocalUser | Format-Table Name, Enabled, LastLogon -AutoSize

# Section 3: Groups
Write-Host "`n=========================="
Write-Host "===*******GROUPS*******==="
Write-Host "==========================`n"
Write-Output "=== Groups ==="
Get-LocalGroup | Format-Table Name, Description -AutoSize

# Section 4: Admin/Sudo Users
Write-Host "`n==========================="
Write-Host "===*******SUDOERS*******==="
Write-Host "===========================`n"
Write-Output "=== Admin Users ==="
Get-LocalGroupMember -Group "Administrators" | Format-Table Name, ObjectClass

# Section 5: Network Configuration
Write-Host "`n=================================="
Write-Host "===*******NETWORK CONFIG*******==="
Write-Host "==================================`n"
Write-Output "=== Network Configuration ==="
Get-NetIPAddress | Format-Table InterfaceAlias, IPAddress, AddressFamily
Write-Output "`n=== Hosts File ==="
Get-Content "C:\Windows\System32\drivers\etc\hosts"
Write-Output "`n=== DNS Configuration ==="
Get-DnsClientServerAddress | Format-Table InterfaceAlias, ServerAddresses

# Section 6: Network Connections with PID and Process Name
Write-Host "`n====================================="
Write-Host "===*******NETWORK CONNECTIONS*******==="
Write-Host "=====================================`n"
Write-Output "=== Active Network Connections with Process Name ==="

Get-NetTCPConnection | ForEach-Object {
    $processId = $_.OwningProcess
    $process = Get-Process -Id $processId -ErrorAction SilentlyContinue

    [PSCustomObject]@{
        LocalAddress  = $_.LocalAddress
        LocalPort     = $_.LocalPort
        RemoteAddress = $_.RemoteAddress
        RemotePort    = $_.RemotePort
        State         = $_.State
        ProcessID     = $processId
        ProcessName   = $process.ProcessName
    }
} | Format-Table -AutoSize


# Section 7: Scheduled Tasks
Write-Host "`n============================"
Write-Host "===*******SCHEDULED TASKS*******==="
Write-Host "============================`n"
Write-Output "=== Scheduled Tasks ==="
Get-ScheduledTask | Format-Table TaskName, State, LastRunTime

# Section 8: Active Processes
Write-Host "`n===================================="
Write-Host "===*******ACTIVE PROCESSES*******==="
Write-Host "====================================`n"
Write-Output "=== Active Processes ==="
Get-Process | Sort-Object CPU -Descending | Format-Table Id, ProcessName, CPU, StartTime -AutoSize

# Section 9: Running Services
Write-Host "`n==================================="
Write-Host "===*******ACTIVE SERVICES*******==="
Write-Host "==================================`n"
Write-Output "=== Running Services ==="
Get-Service | Where-Object {$_.Status -eq 'Running'} | Format-Table Name, DisplayName, Status

# Section 10: Searching for Executables with Special Permissions (SUID/SGID equivalent)
Write-Host "`n==========================================="
Write-Host "===*******SPECIAL PERMISSIONS EXECUTABLES*******==="
Write-Host "===========================================`n"
Write-Output "=== Executables with Special Permissions ==="
$directories = @("C:\Windows\System32", "C:\Program Files", "C:\Program Files (x86)")
foreach ($dir in $directories) {
    Get-ChildItem -Path $dir -Recurse -ErrorAction SilentlyContinue |
    Where-Object {($_.Attributes -match "Archive") -and ($_.Mode -match "s")} |
    Format-Table FullName, Mode
}

# Stop transcript (End logging to the file)
Stop-Transcript
Write-Host "`nEnumeration completed! Report saved at: $outputFile"
